from datetime import datetime
from statistics import median
from collections import Counter, defaultdict
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import os

# Configura√ß√µes globais para gr√°ficos mais bonitos
plt.style.use('seaborn-v0_8-darkgrid')
plt.rcParams['figure.figsize'] = (12, 8)
plt.rcParams['font.size'] = 12
plt.rcParams['axes.titlesize'] = 14
plt.rcParams['axes.labelsize'] = 12
plt.rcParams['xtick.labelsize'] = 10
plt.rcParams['ytick.labelsize'] = 10
plt.rcParams['legend.fontsize'] = 11
plt.rcParams['figure.titlesize'] = 16

# Paleta de cores profissional
colors = ['#2E86AB', '#A23B72', '#F18F01', '#C73E1D', '#592941', '#048A81', '#7209B7', '#F72585']

def format_number(num):
    """Formata n√∫meros para exibi√ß√£o mais leg√≠vel"""
    if num >= 1e6:
        return f'{num/1e6:.1f}M'
    elif num >= 1e3:
        return f'{num/1e3:.1f}K'
    else:
        return str(int(num))

def create_histogram_with_stats(data, title, xlabel, ylabel, filename, bins=30, color='#2E86AB'):
    """Cria histograma com estat√≠sticas e linha de mediana"""
    plt.figure(figsize=(12, 8))
    
    # Filtrar outliers extremos para melhor visualiza√ß√£o
    q1, q3 = np.percentile(data, [25, 75])
    iqr = q3 - q1
    lower_bound = q1 - 1.5 * iqr
    upper_bound = q3 + 1.5 * iqr
    data_filtered = [x for x in data if lower_bound <= x <= upper_bound]
    
    # Histograma
    n, bins_edges, patches = plt.hist(data_filtered, bins=bins, alpha=0.7, color=color, edgecolor='black', linewidth=0.5)
    
    # Linha da mediana
    median_val = median(data)
    plt.axvline(median_val, color='red', linestyle='--', linewidth=2, 
                label=f'Mediana: {format_number(median_val)}')
    
    # Estat√≠sticas no gr√°fico
    mean_val = np.mean(data)
    std_val = np.std(data)
    
    # Box com estat√≠sticas
    stats_text = f'M√©dia: {format_number(mean_val)}\nDesvio: {format_number(std_val)}\nN: {len(data):,}'
    plt.text(0.7, 0.85, stats_text, transform=plt.gca().transAxes, 
             bbox=dict(boxstyle="round,pad=0.3", facecolor="white", alpha=0.8),
             verticalalignment='top', fontsize=10)
    
    plt.title(title, fontweight='bold', pad=20)
    plt.xlabel(xlabel, fontweight='bold')
    plt.ylabel(ylabel, fontweight='bold')
    plt.legend()
    plt.grid(True, alpha=0.3)
    plt.tight_layout()
    plt.savefig(filename, dpi=300, bbox_inches='tight')
    plt.close()

def create_boxplot(data, title, ylabel, filename):
    """Cria boxplot com estat√≠sticas"""
    plt.figure(figsize=(8, 10))
    
    box = plt.boxplot(data, patch_artist=True, notch=True)
    box['boxes'][0].set_facecolor('#2E86AB')
    box['boxes'][0].set_alpha(0.7)
    
    # Adicionar estat√≠sticas
    median_val = median(data)
    q1, q3 = np.percentile(data, [25, 75])
    
    stats_text = f'Q1: {format_number(q1)}\nMediana: {format_number(median_val)}\nQ3: {format_number(q3)}'
    plt.text(1.15, median_val, stats_text, 
             bbox=dict(boxstyle="round,pad=0.3", facecolor="white", alpha=0.8),
             verticalalignment='center', fontsize=10)
    
    plt.title(title, fontweight='bold', pad=20)
    plt.ylabel(ylabel, fontweight='bold')
    plt.grid(True, alpha=0.3)
    plt.tight_layout()
    plt.savefig(filename, dpi=300, bbox_inches='tight')
    plt.close()

def create_language_bar_chart(language_count, filename, top_n=15):
    """Cria gr√°fico de barras para linguagens com melhor formata√ß√£o"""
    plt.figure(figsize=(14, 8))
    
    # Top N linguagens
    top_langs = language_count.most_common(top_n)
    langs, counts = zip(*top_langs)
    
    # Gr√°fico de barras horizontal para melhor legibilidade
    y_pos = np.arange(len(langs))
    bars = plt.barh(y_pos, counts, color=colors[0], alpha=0.8, edgecolor='black', linewidth=0.5)
    
    # Adicionar valores nas barras
    for i, (bar, count) in enumerate(zip(bars, counts)):
        plt.text(bar.get_width() + max(counts) * 0.01, bar.get_y() + bar.get_height()/2,
                f'{count}', ha='left', va='center', fontweight='bold')
    
    plt.yticks(y_pos, langs)
    plt.xlabel('N√∫mero de Reposit√≥rios', fontweight='bold')
    plt.title(f'Top {top_n} Linguagens de Programa√ß√£o mais Populares', fontweight='bold', pad=20)
    plt.grid(True, alpha=0.3, axis='x')
    plt.tight_layout()
    plt.savefig(filename, dpi=300, bbox_inches='tight')
    plt.close()

def create_language_comparison_chart(lang_metrics, metric_name, title, filename, top_n=10):
    """Cria gr√°fico de compara√ß√£o por linguagem"""
    plt.figure(figsize=(14, 8))
    
    # Calcular medianas e ordenar
    lang_medians = []
    for lang, metrics in lang_metrics.items():
        if len(metrics[metric_name]) > 5:  # S√≥ linguagens com pelo menos 5 repos
            lang_medians.append((lang, median(metrics[metric_name])))
    
    # Ordenar por mediana e pegar top N
    lang_medians.sort(key=lambda x: x[1], reverse=True)
    lang_medians = lang_medians[:top_n]
    
    langs, medians = zip(*lang_medians)
    
    # Gr√°fico de barras horizontal
    y_pos = np.arange(len(langs))
    bars = plt.barh(y_pos, medians, color=colors[1], alpha=0.8, edgecolor='black', linewidth=0.5)
    
    # Adicionar valores nas barras
    for bar, median_val in zip(bars, medians):
        plt.text(bar.get_width() + max(medians) * 0.01, bar.get_y() + bar.get_height()/2,
                format_number(median_val), ha='left', va='center', fontweight='bold')
    
    plt.yticks(y_pos, langs)
    plt.xlabel(f'{metric_name.title().replace("_", " ")} (Mediana)', fontweight='bold')
    plt.title(title, fontweight='bold', pad=20)
    plt.grid(True, alpha=0.3, axis='x')
    plt.tight_layout()
    plt.savefig(filename, dpi=300, bbox_inches='tight')
    plt.close()

def create_combined_rq07_chart(lang_metrics, filename):
    """Cria gr√°fico combinado para RQ07 com m√∫ltiplas m√©tricas"""
    # Filtrar linguagens com pelo menos 10 reposit√≥rios
    filtered_langs = {}
    for lang, metrics in lang_metrics.items():
        if len(metrics['prs']) >= 10 and lang != 'Desconhecida':
            filtered_langs[lang] = metrics
    
    # Calcular medianas para top 8 linguagens (por n√∫mero de repos)
    lang_counts = [(lang, len(metrics['prs'])) for lang, metrics in filtered_langs.items()]
    lang_counts.sort(key=lambda x: x[1], reverse=True)
    top_8_langs = [lang for lang, _ in lang_counts[:8]]
    
    # Preparar dados
    langs = []
    prs_medians = []
    releases_medians = []
    updates_medians = []
    
    for lang in top_8_langs:
        metrics = filtered_langs[lang]
        langs.append(lang)
        prs_medians.append(median(metrics['prs']))
        releases_medians.append(median(metrics['releases']))
        updates_medians.append(median(metrics['updates']))
    
    # Criar subplot com 3 gr√°ficos
    fig, axes = plt.subplots(3, 1, figsize=(14, 12))
    fig.suptitle('RQ07: Compara√ß√£o de M√©tricas por Linguagem (Top 8)', fontsize=16, fontweight='bold')
    
    x = np.arange(len(langs))
    width = 0.6
    
    # PRs Merged
    bars1 = axes[0].bar(x, prs_medians, width, color=colors[0], alpha=0.8, edgecolor='black', linewidth=0.5)
    axes[0].set_title('Pull Requests Merged (Mediana)', fontweight='bold')
    axes[0].set_ylabel('PRs Merged', fontweight='bold')
    axes[0].grid(True, alpha=0.3, axis='y')
    
    # Adicionar valores
    for bar, val in zip(bars1, prs_medians):
        axes[0].text(bar.get_x() + bar.get_width()/2, bar.get_height() + max(prs_medians) * 0.01,
                    format_number(val), ha='center', va='bottom', fontweight='bold')
    
    # Releases
    bars2 = axes[1].bar(x, releases_medians, width, color=colors[1], alpha=0.8, edgecolor='black', linewidth=0.5)
    axes[1].set_title('Releases (Mediana)', fontweight='bold')
    axes[1].set_ylabel('Releases', fontweight='bold')
    axes[1].grid(True, alpha=0.3, axis='y')
    
    for bar, val in zip(bars2, releases_medians):
        axes[1].text(bar.get_x() + bar.get_width()/2, bar.get_height() + max(releases_medians) * 0.01,
                    format_number(val), ha='center', va='bottom', fontweight='bold')
    
    # Dias desde atualiza√ß√£o
    bars3 = axes[2].bar(x, updates_medians, width, color=colors[2], alpha=0.8, edgecolor='black', linewidth=0.5)
    axes[2].set_title('Dias desde √öltima Atualiza√ß√£o (Mediana)', fontweight='bold')
    axes[2].set_ylabel('Dias', fontweight='bold')
    axes[2].set_xlabel('Linguagens de Programa√ß√£o', fontweight='bold')
    axes[2].grid(True, alpha=0.3, axis='y')
    
    for bar, val in zip(bars3, updates_medians):
        axes[2].text(bar.get_x() + bar.get_width()/2, bar.get_height() + max(updates_medians) * 0.01,
                    format_number(val), ha='center', va='bottom', fontweight='bold')
    
    # Configurar eixo X para todos os subplots
    for ax in axes:
        ax.set_xticks(x)
        ax.set_xticklabels(langs, rotation=45, ha='right')
    
    plt.tight_layout()
    plt.savefig(filename, dpi=300, bbox_inches='tight')
    plt.close()

def generate_report(repos):
    os.makedirs("data/figs", exist_ok=True)
    today = datetime.utcnow()

    print("üìä Gerando relat√≥rio com visualiza√ß√µes melhoradas...")

    # --- Calcular m√©tricas ---
    ages = [(today - datetime.fromisoformat(r["createdAt"].replace("Z",""))).days for r in repos]
    ages_years = [age / 365.25 for age in ages]  # Converter para anos
    prs_merged = [r.get("pullRequestsMerged", {}).get("totalCount", 0) for r in repos]
    releases = [r.get("releases", {}).get("totalCount", 0) for r in repos]
    updates = [(today - datetime.fromisoformat(r["pushedAt"].replace("Z",""))).days for r in repos]
    languages = [r.get("primaryLanguage", {}).get("name") if r.get("primaryLanguage") else "Desconhecida" for r in repos]
    issues_open = [r.get("issues", {}).get("totalCount",0) for r in repos]
    issues_closed = [r.get("issuesClosed", {}).get("totalCount",0) for r in repos]
    ratios_issues_closed = [closed/(closed+open_) if (closed+open_)>0 else 0 for open_, closed in zip(issues_open, issues_closed)]

    # --- Medianas ---
    median_age_days = median(ages)
    median_age_years = median(ages_years)
    median_prs_merged = median(prs_merged)
    median_releases = median(releases)
    median_update_days = median(updates)
    median_issues_closed_ratio = median(ratios_issues_closed)

    # --- Gerar gr√°ficos melhorados ---
    
    # RQ01: Idade
    print("üìà Gerando gr√°ficos para RQ01 (Idade)...")
    create_histogram_with_stats(ages_years, 
                               "RQ01: Distribui√ß√£o da Idade dos Reposit√≥rios", 
                               "Idade (anos)", "N√∫mero de Reposit√≥rios",
                               "data/figs/rq01_idade.png", color=colors[0])
    
    # RQ02: Pull Requests
    print("üìà Gerando gr√°ficos para RQ02 (Pull Requests)...")
    create_histogram_with_stats(prs_merged, 
                               "RQ02: Distribui√ß√£o de Pull Requests Aceitas", 
                               "Pull Requests Merged", "N√∫mero de Reposit√≥rios",
                               "data/figs/rq02_prs_hist.png", color=colors[1])
    
    create_boxplot(prs_merged, "RQ02: Pull Requests Aceitas - An√°lise de Quartis", 
                   "Pull Requests Merged", "data/figs/rq02_prs_box.png")

    # RQ03: Releases
    print("üìà Gerando gr√°ficos para RQ03 (Releases)...")
    create_histogram_with_stats(releases, 
                               "RQ03: Distribui√ß√£o de Releases", 
                               "N√∫mero de Releases", "N√∫mero de Reposit√≥rios",
                               "data/figs/rq03_releases_hist.png", color=colors[2])
    
    create_boxplot(releases, "RQ03: Releases - An√°lise de Quartis", 
                   "N√∫mero de Releases", "data/figs/rq03_releases_box.png")

    # RQ04: Atualiza√ß√µes
    print("üìà Gerando gr√°ficos para RQ04 (Atualiza√ß√µes)...")
    create_histogram_with_stats(updates, 
                               "RQ04: Dias desde a √öltima Atualiza√ß√£o", 
                               "Dias desde √öltima Atualiza√ß√£o", "N√∫mero de Reposit√≥rios",
                               "data/figs/rq04_updates.png", color=colors[3])

    # RQ05: Linguagens
    print("üìà Gerando gr√°ficos para RQ05 (Linguagens)...")
    language_count = Counter(languages)
    create_language_bar_chart(language_count, "data/figs/rq05_languages.png")

    # RQ06: Issues fechadas
    print("üìà Gerando gr√°ficos para RQ06 (Issues)...")
    create_histogram_with_stats(ratios_issues_closed, 
                               "RQ06: Percentual de Issues Fechadas", 
                               "Propor√ß√£o de Issues Fechadas", "N√∫mero de Reposit√≥rios",
                               "data/figs/rq06_issues.png", bins=20, color=colors[4])

    # RQ07: An√°lise por linguagem
    print("üìà Gerando gr√°ficos para RQ07 (An√°lise por Linguagem)...")
    lang_metrics = defaultdict(lambda: {"prs": [], "releases": [], "updates": []})
    for r in repos:
        lang = r.get("primaryLanguage", {}).get("name") if r.get("primaryLanguage") else "Desconhecida"
        lang_metrics[lang]["prs"].append(r.get("pullRequestsMerged", {}).get("totalCount", 0))
        lang_metrics[lang]["releases"].append(r.get("releases", {}).get("totalCount", 0))
        days_since_update = (today - datetime.fromisoformat(r["pushedAt"].replace("Z",""))).days
        lang_metrics[lang]["updates"].append(days_since_update)

    # Gr√°fico combinado para RQ07
    create_combined_rq07_chart(lang_metrics, "data/figs/rq07_combined.png")
    
    # Gr√°ficos individuais para RQ07
    create_language_comparison_chart(lang_metrics, "prs", 
                                   "RQ07a: Pull Requests Merged por Linguagem",
                                   "data/figs/rq07_prs.png")
    
    create_language_comparison_chart(lang_metrics, "releases", 
                                   "RQ07b: Releases por Linguagem",
                                   "data/figs/rq07_releases.png")
    
    create_language_comparison_chart(lang_metrics, "updates", 
                                   "RQ07c: Dias desde √öltima Atualiza√ß√£o por Linguagem",
                                   "data/figs/rq07_updates.png")

    # --- Gerar relat√≥rio em Markdown ---
    print("üìù Gerando relat√≥rio em Markdown...")
    
    # Top 10 linguagens para o relat√≥rio
    top_10_languages = language_count.most_common(10)
    lang_table = ""
    for i, (lang, count) in enumerate(top_10_languages, 1):
        percentage = (count / len(repos)) * 100
        lang_table += f"{i}. **{lang}**: {count} reposit√≥rios ({percentage:.1f}%)\n"

    report_md = f"""# üìä Relat√≥rio Final: An√°lise de Reposit√≥rios Populares do GitHub

**Data da An√°lise:** {datetime.now().strftime('%d/%m/%Y √†s %H:%M')}  
**Total de Reposit√≥rios Analisados:** {len(repos):,}

---

## üéØ Resumo Executivo

Este relat√≥rio analisa os {len(repos):,} reposit√≥rios mais populares do GitHub (baseado em estrelas) para compreender padr√µes de desenvolvimento, manuten√ß√£o e caracter√≠sticas de projetos open-source populares.

---

## üìà RQ01: Sistemas populares s√£o maduros/antigos?

**M√©trica:** Idade do reposit√≥rio  
**Resultado:** {median_age_years:.1f} anos (mediana) | {median_age_days:,} dias

![RQ01](figs/rq01_idade.png)

**üí° Interpreta√ß√£o:** Reposit√≥rios populares t√™m uma idade mediana de **{median_age_years:.1f} anos**, indicando que leva tempo para um projeto ganhar reconhecimento e acumular estrelas na comunidade.

---

## ü§ù RQ02: Sistemas populares recebem muita contribui√ß√£o externa?

**M√©trica:** Pull Requests aceitas (merged)  
**Resultado:** {median_prs_merged:,} PRs merged (mediana)

![RQ02 Distribui√ß√£o](figs/rq02_prs_hist.png)
![RQ02 Quartis](figs/rq02_prs_box.png)

**üí° Interpreta√ß√£o:** A mediana de **{median_prs_merged:,} PRs merged** sugere contribui√ß√£o externa moderada, mas com grande varia√ß√£o entre projetos.

---

## üöÄ RQ03: Sistemas populares lan√ßam releases com frequ√™ncia?

**M√©trica:** Total de releases  
**Resultado:** {median_releases:,} releases (mediana)

![RQ03 Distribui√ß√£o](figs/rq03_releases_hist.png)
![RQ03 Quartis](figs/rq03_releases_box.png)

**üí° Interpreta√ß√£o:** Com **{median_releases:,} releases** na mediana, observamos pr√°ticas variadas de versionamento entre projetos populares.

---

## üîÑ RQ04: Sistemas populares s√£o atualizados com frequ√™ncia?

**M√©trica:** Dias desde a √∫ltima atualiza√ß√£o  
**Resultado:** {median_update_days:,} dias (mediana)

![RQ04](figs/rq04_updates.png)

**üí° Interpreta√ß√£o:** A mediana de **{median_update_days:,} dias** indica que a maioria dos reposit√≥rios populares √© mantida ativamente.

---

## üíª RQ05: Sistemas populares s√£o escritos nas linguagens mais populares?

**M√©trica:** Distribui√ß√£o por linguagem prim√°ria

![RQ05](figs/rq05_languages.png)

**Top 10 Linguagens:**
{lang_table}

**üí° Interpreta√ß√£o:** JavaScript, Python e TypeScript dominam, refletindo sua popularidade no desenvolvimento web, ci√™ncia de dados e aplica√ß√µes modernas.

---

## ‚úÖ RQ06: Sistemas populares possuem um alto percentual de issues fechadas?

**M√©trica:** Propor√ß√£o de issues fechadas  
**Resultado:** {median_issues_closed_ratio:.1%} (mediana)

![RQ06](figs/rq06_issues.png)

**üí° Interpreta√ß√£o:** Com **{median_issues_closed_ratio:.1%}** de issues fechadas na mediana, observamos boa gest√£o de issues na maioria dos projetos populares.

---

## üéØ RQ07 (B√¥nus): An√°lise por Linguagem

**Quest√£o:** Sistemas escritos em linguagens mais populares recebem mais contribui√ß√£o externa, lan√ßam mais releases e s√£o atualizados com mais frequ√™ncia?

![RQ07 Compara√ß√£o Completa](figs/rq07_combined.png)

### An√°lises Detalhadas por M√©trica:

![RQ07 PRs por Linguagem](figs/rq07_prs.png)
![RQ07 Releases por Linguagem](figs/rq07_releases.png) 
![RQ07 Atualiza√ß√µes por Linguagem](figs/rq07_updates.png)

**üí° Interpreta√ß√£o:** Diferentes linguagens apresentam padr√µes distintos:
- **Linguagens de sistema** (C, C++, Rust) tendem a ter mais releases
- **Linguagens web** (JavaScript, TypeScript) recebem mais contribui√ß√µes
- **Linguagens estabelecidas** mant√™m frequ√™ncia de atualiza√ß√£o consistente

---

## üèÜ Conclus√µes Principais

1. **Maturidade**: Reposit√≥rios populares levam tempo para se estabelecer (~{median_age_years:.1f} anos)
2. **Contribui√ß√£o**: Existe grande varia√ß√£o na contribui√ß√£o externa entre projetos
3. **Manuten√ß√£o**: A maioria dos projetos populares √© mantida ativamente
4. **Linguagens**: JavaScript e Python dominam o ecossistema open-source popular
5. **Gest√£o**: Projetos populares mant√™m boa gest√£o de issues
6. **Padr√µes por Linguagem**: Diferentes linguagens t√™m caracter√≠sticas distintas de desenvolvimento

---

## üìä Estat√≠sticas Gerais

- **Total de reposit√≥rios analisados**: {len(repos):,}
- **Idade m√©dia**: {np.mean(ages_years):.1f} anos
- **Linguagens √∫nicas identificadas**: {len(language_count)}
- **Per√≠odo de an√°lise**: {datetime.now().strftime('%B de %Y')}

---

*Relat√≥rio gerado automaticamente em {datetime.now().strftime('%d/%m/%Y √†s %H:%M:%S')}*
"""

    # Salvar relat√≥rio
    with open("data/report.md", "w", encoding="utf-8") as f:
        f.write(report_md)
    with open("data/report.txt", "w", encoding="utf-8") as f:
        f.write(report_md)

    print("‚úÖ Relat√≥rio completo gerado com sucesso!")
    print(f"üìÅ Gr√°ficos salvos em: data/figs/")
    print(f"üìÑ Relat√≥rio salvo em: data/report.md")
    print(f"üìä Total de {len(repos):,} reposit√≥rios analisados")
    
    # Exibir resumo das m√©tricas principais
    print("\n" + "="*50)
    print("üìä RESUMO DAS M√âTRICAS PRINCIPAIS")
    print("="*50)
    print(f"üóìÔ∏è  Idade mediana: {median_age_years:.1f} anos")
    print(f"ü§ù PRs merged mediana: {median_prs_merged:,}")
    print(f"üöÄ Releases mediana: {median_releases:,}")
    print(f"üîÑ Dias desde atualiza√ß√£o: {median_update_days:,}")
    print(f"‚úÖ Issues fechadas: {median_issues_closed_ratio:.1%}")
    print(f"üíª Linguagem mais popular: {top_10_languages[0][0]} ({top_10_languages[0][1]} repos)")
    print("="*50)